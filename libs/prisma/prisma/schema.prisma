// Prisma schema for Fixelo marketplace

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  CLIENT
  PROVIDER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum ServiceCategory {
  // üè† HOME & MAINTENANCE
  HOUSE_CLEANING
  DEEP_CLEANING
  MOVE_IN_OUT_CLEANING
  OFFICE_CLEANING
  WINDOW_CLEANING
  PRESSURE_WASHING
  GUTTER_CLEANING
  ROOF_CLEANING
  POOL_CLEANING
  LAWN_MOWING
  LANDSCAPING
  TREE_TRIMMING
  SPRINKLER_REPAIR
  PEST_CONTROL
  HANDYMAN
  ELECTRICAL_WORK
  PLUMBING
  HVAC_REPAIR
  APPLIANCE_REPAIR
  PAINTING
  FLOORING
  ROOFING
  KITCHEN_REMODELING
  BATHROOM_REMODELING
  CARPENTRY
  DRYWALL_REPAIR
  TILE_INSTALLATION
  CABINET_INSTALLATION
  COUNTERTOP_INSTALLATION
  
  // üöö MOVING & DELIVERY
  MOVING_SERVICES
  PACKING_SERVICES
  FURNITURE_ASSEMBLY
  JUNK_REMOVAL
  STORAGE_SERVICES
  DELIVERY_SERVICES
  COURIER_SERVICES
  
  // üîß AUTOMOTIVE
  AUTO_REPAIR
  OIL_CHANGE
  CAR_WASH
  DETAILING
  TIRE_SERVICES
  BRAKE_REPAIR
  ENGINE_REPAIR
  TRANSMISSION_REPAIR
  AUTO_GLASS_REPAIR
  MOBILE_MECHANIC
  
  // üíÑ BEAUTY & WELLNESS
  HAIR_STYLING
  HAIR_COLORING
  HAIR_EXTENSIONS
  BARBERING
  NAIL_SERVICES
  MANICURE_PEDICURE
  MASSAGE_THERAPY
  FACIAL_TREATMENTS
  EYEBROW_THREADING
  EYELASH_EXTENSIONS
  MAKEUP_SERVICES
  PERSONAL_TRAINING
  YOGA_INSTRUCTION
  NUTRITION_COACHING
  
  // üéâ EVENTS & ENTERTAINMENT
  WEDDING_PLANNING
  PARTY_PLANNING
  CATERING
  PHOTOGRAPHY
  VIDEOGRAPHY
  DJ_SERVICES
  LIVE_MUSIC
  EVENT_DECORATION
  BARTENDING
  SECURITY_SERVICES
  
  // üë®‚Äçüè´ PERSONAL SERVICES
  TUTORING
  MUSIC_LESSONS
  LANGUAGE_LESSONS
  COMPUTER_REPAIR
  PHONE_REPAIR
  IT_SUPPORT
  WEB_DESIGN
  GRAPHIC_DESIGN
  ACCOUNTING
  TAX_PREPARATION
  LEGAL_SERVICES
  NOTARY_SERVICES
  TRANSLATION_SERVICES
  
  // üêï PET SERVICES
  PET_GROOMING
  DOG_WALKING
  PET_SITTING
  PET_BOARDING
  VETERINARY_SERVICES
  PET_TRAINING
  PET_TRANSPORTATION
  
  // üë∂ CHILDCARE & SENIOR CARE
  BABYSITTING
  NANNY_SERVICES
  ELDER_CARE
  COMPANION_CARE
  RESPITE_CARE
  
  // üè• HEALTH & MEDICAL
  PHYSICAL_THERAPY
  OCCUPATIONAL_THERAPY
  SPEECH_THERAPY
  MENTAL_HEALTH_COUNSELING
  MEDICAL_TRANSPORT
  PHARMACY_DELIVERY
  MEDICAL_EQUIPMENT
  
  // üéì EDUCATION & TRAINING
  DRIVING_LESSONS
  SPORTS_COACHING
  LIFE_COACHING
  CAREER_COACHING
  SKILL_TRAINING
  
  // üßπ SPECIALIZED CLEANING
  CARPET_STEAM_CLEANING
  UPHOLSTERY_CLEANING
  TILE_GROUT_CLEANING
  MATTRESS_CLEANING
  VENT_CLEANING
  CHIMNEY_CLEANING_SERVICE
  BIOHAZARD_CLEANING
  
  // üè† REAL ESTATE SERVICES
  HOME_STAGING
  PROPERTY_MANAGEMENT
  REAL_ESTATE_PHOTOGRAPHY
  HOME_INSPECTION
  APPRAISAL
  
  // üé™ UNIQUE & SPECIALTY
  MAGIC_SHOWS
  CLOWNS
  FACE_PAINTING
  BALLOON_ARTIST
  COSTUME_RENTAL
  EQUIPMENT_RENTAL
  TOOL_RENTAL
  
  OTHER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  DISPUTED
}

enum PlanType {
  FREE
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  TRIALING
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum NotificationType {
  BOOKING_REQUEST
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  PAYMENT_RECEIVED
  MESSAGE_RECEIVED
  REVIEW_RECEIVED
  PLAN_UPGRADED
  VERIFICATION_APPROVED
  VERIFICATION_REJECTED
}

enum Language {
  en
  pt
  es
}

// ADS System Enums
enum AdType {
  BOOST
  BANNER
  FEATURED
  SPONSORED
  PREMIUM_BADGE
  TOP_SEARCH
}

enum AdStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum BudgetType {
  DAILY
  TOTAL
  PER_CLICK
  PER_LEAD
}

enum BidStatus {
  ACTIVE
  PAUSED
  EXPIRED
}

enum TransactionType {
  SUBSCRIPTION
  LEAD_PURCHASE
  AD_CAMPAIGN
  BOOST
  REFUND
}

enum PaymentMethodType {
  CARD
  BANK_ACCOUNT
  DIGITAL_WALLET
}

// User model (base for all user types)
model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String // hashed
  firstName String
  lastName  String
  phone     String? @unique
  avatar    String?
  role      UserRole
  status    UserStatus @default(ACTIVE)
  language  Language   @default(en)

  // Location information
  address   String?
  city      String?
  state     String? // Always FL for Florida
  zipCode   String?
  latitude  Float?
  longitude Float?
  country   String? // Always USA

  // Provider-specific fields (only for PROVIDER role)
  businessName       String?
  bio                String?
  verified           Boolean  @default(false)
  planType           PlanType @default(FREE)
  planExpiresAt      DateTime?
  leadsUsed          Int      @default(0)
  leadsLimit         Int      @default(10)
  leadCount          Int      @default(0)
  rating             Float    @default(0)
  reviewCount        Int      @default(0)
  completedBookings  Int      @default(0)
  
  // Payment fields
  stripeCustomerId   String?
  subscriptionId     String?
  subscriptionStatus String?

  // Relationships
  providedServices   Service[]      @relation("ServiceProvider")
  clientBookings     Booking[]      @relation("BookingClient")
  providerBookings   Booking[]      @relation("BookingProvider")
  sentMessages       Message[]      @relation("MessageSender")
  receivedReviews    Review[]       @relation("ReviewProvider")
  givenReviews       Review[]       @relation("ReviewClient")
  subscriptions      Subscription[]
  notifications      Notification[]
  refreshTokens      RefreshToken[]
  adCampaigns        AdCampaign[]   @relation("AdCampaignProvider")
  transactions       Transaction[]  @relation("UserTransaction")
  paymentMethods     PaymentMethod[] @relation("UserPaymentMethods")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  preferredLanguage String   @default("en")
  isActive          Boolean  @default(true)
  emailVerified     Boolean  @default(false)
  lastLogin         DateTime?

  @@map("users")
}

// Service model
model Service {
  id          String        @id @default(cuid())
  title       String
  description String
  category    ServiceCategory
  price       Float // in USD
  currency    String        @default("USD")
  duration    Int // in minutes
  images      String[] // array of image URLs
  status      ServiceStatus @default(ACTIVE)
  isActive    Boolean       @default(true)
  tags        String[]

  // Location (can be different from provider location)
  address   String?
  city      String?
  state     String?
  zipCode   String?
  latitude  Float?
  longitude Float?

  // Relationships
  providerId String
  provider   User         @relation("ServiceProvider", fields: [providerId], references: [id], onDelete: Cascade)
  bookings   Booking[]
  reviews    Review[]
  adCampaigns AdCampaign[] @relation("AdCampaignService")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}

// Booking model
model Booking {
  id              String        @id @default(cuid())
  status          BookingStatus @default(PENDING)
  scheduledAt     DateTime
  duration        Int // in minutes
  totalAmount     Float
  currency        String        @default("USD")
  paymentStatus   PaymentStatus @default(PENDING)
  paymentIntentId String? // Stripe payment intent ID
  notes           String?

  // Location (where service will be performed)
  address   String?
  city      String?
  state     String?
  zipCode   String?
  latitude  Float?
  longitude Float?

  // Relationships
  serviceId  String
  service    Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  clientId   String
  client     User      @relation("BookingClient", fields: [clientId], references: [id], onDelete: Cascade)
  providerId String
  provider   User      @relation("BookingProvider", fields: [providerId], references: [id], onDelete: Cascade)
  messages   Message[]
  reviews    Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}

// Review model
model Review {
  id       String  @id @default(cuid())
  rating   Int // 1-5
  comment  String?
  response String? // Provider response to review

  // Relationships
  bookingId  String
  booking    Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  clientId   String
  client     User    @relation("ReviewClient", fields: [clientId], references: [id], onDelete: Cascade)
  providerId String
  provider   User    @relation("ReviewProvider", fields: [providerId], references: [id], onDelete: Cascade)
  serviceId  String
  service    Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([bookingId, clientId])
  @@map("reviews")
}

// Message model (for chat between client and provider)
model Message {
  id          String      @id @default(cuid())
  content     String
  messageType MessageType @default(TEXT)
  readAt      DateTime?

  // Relationships
  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  senderId  String
  sender    User    @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("messages")
}

// Plan model
model Plan {
  id            String    @id @default(cuid())
  type          PlanType  @unique
  name          String
  price         Float
  currency      String    @default("USD")
  billingPeriod String    @default("monthly") // monthly, yearly
  features      String[]
  leadsLimit    Int?
  trialDays     Int?
  isActive      Boolean   @default(true)

  // Relationships
  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plans")
}

// Subscription model
model Subscription {
  id                    String             @id @default(cuid())
  stripeSubscriptionId  String             @unique
  status                SubscriptionStatus
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  cancelAtPeriodEnd     Boolean            @default(false)

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId String
  plan   Plan   @relation(fields: [planId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

// Notification model
model Notification {
  id      String           @id @default(cuid())
  type    NotificationType
  title   String
  message String
  data    Json? // Additional data in JSON format
  readAt  DateTime?

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("notifications")
}

// Lead purchase tracking (for free plan users)
model LeadPurchase {
  id       String @id @default(cuid())
  amount   Float // Amount paid for lead
  currency String @default("USD")

  // Relationships
  userId String
  // Note: No foreign key constraint to avoid circular dependency issues

  createdAt DateTime @default(now())

  @@map("lead_purchases")
}

// Refresh token model (for JWT auth)
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

// Verification model (for phone/email verification)
model Verification {
  id        String   @id @default(cuid())
  type      String // "email" or "phone"
  value     String // email or phone number
  code      String
  verified  Boolean  @default(false)
  expiresAt DateTime

  createdAt DateTime @default(now())

  @@unique([type, value])
  @@map("verifications")
}

// Admin audit log
model AuditLog {
  id       String @id @default(cuid())
  action   String
  resource String
  resourceId String?
  details  Json?

  // Admin who performed the action
  adminId String?

  createdAt DateTime @default(now())

  @@map("audit_logs")
}

// Service boost/ads tracking
model ServiceBoost {
  id        String   @id @default(cuid())
  amount    Float // Amount paid for boost
  currency  String   @default("USD")
  startsAt  DateTime
  endsAt    DateTime
  isActive  Boolean  @default(true)

  // Relationships
  serviceId String
  // Note: No foreign key to avoid complications

  createdAt DateTime @default(now())

  @@map("service_boosts")
}

// ================== ADS SYSTEM TABLES ==================

// Ad Campaign model
model AdCampaign {
  id          String     @id @default(cuid())
  name        String
  description String?
  adType      AdType
  status      AdStatus   @default(DRAFT)
  budget      Float
  budgetType  BudgetType
  spent       Float      @default(0)
  
  // Payment method for this campaign
  paymentMethodId String?
  
  // Metrics
  impressions  Int @default(0)
  clicks       Int @default(0)
  leads        Int @default(0)
  conversions  Int @default(0)
  
  // Auction data
  currentPosition Int?
  actualCpc       Float?
  
  // Schedule
  startDate   DateTime
  endDate     DateTime
  activatedAt DateTime?
  
  // Targeting (stored as JSON)
  targeting String? // JSON string
  creative  String? // JSON string
  
  // Relationships
  serviceId  String
  service    Service @relation("AdCampaignService", fields: [serviceId], references: [id], onDelete: Cascade)
  providerId String
  provider   User    @relation("AdCampaignProvider", fields: [providerId], references: [id], onDelete: Cascade)
  paymentMethod PaymentMethod? @relation("CampaignPaymentMethod", fields: [paymentMethodId], references: [id])
  bids       AdBid[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("ad_campaigns")
}

// Ad Bid model (for auction system)
model AdBid {
  id             String    @id @default(cuid())
  bidAmount      Float
  targetPosition Int
  autoBid        Boolean   @default(false)
  maxBid         Float?
  status         BidStatus @default(ACTIVE)
  
  // Relationships
  campaignId String
  campaign   AdCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("ad_bids")
}

// Transaction model (for all payments)
model Transaction {
  id          String          @id @default(cuid())
  type        TransactionType
  amount      Float
  currency    String          @default("USD")
  status      String          @default("PENDING") // PENDING, COMPLETED, FAILED, REFUNDED
  description String?
  metadata    String? // JSON string for additional data
  
  // Stripe data
  stripePaymentIntentId String?
  stripeChargeId        String?
  
  // Relationships
  userId String
  user   User   @relation("UserTransaction", fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("transactions")
}

// Payment Method model (for storing user payment methods)
model PaymentMethod {
  id           String            @id @default(cuid())
  userId       String
  stripeId     String            @unique // pm_xxxxx from Stripe
  type         PaymentMethodType
  last4        String
  brand        String            // visa, mastercard, amex, etc.
  expiryMonth  Int
  expiryYear   Int
  isDefault    Boolean           @default(false)
  isActive     Boolean           @default(true)
  
  // Billing details
  billingName    String?
  billingEmail   String?
  billingAddress String?
  billingCity    String?
  billingState   String?
  billingZip     String?
  billingCountry String?
  
  // Relationships
  user      User        @relation("UserPaymentMethods", fields: [userId], references: [id], onDelete: Cascade)
  campaigns AdCampaign[] @relation("CampaignPaymentMethod")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("payment_methods")
}

// Ad Metrics model (for detailed analytics)
model AdMetric {
  id          String   @id @default(cuid())
  date        DateTime
  impressions Int      @default(0)
  clicks      Int      @default(0)
  leads       Int      @default(0)
  conversions Int      @default(0)
  spent       Float    @default(0)
  
  // Audience data (stored as JSON)
  audienceData String? // JSON string
  
  // Relationships
  campaignId String
  // Note: No foreign key to avoid complications with campaign deletion
  
  createdAt DateTime @default(now())
  
  @@unique([campaignId, date])
  @@map("ad_metrics")
}

// Lead model (for tracking leads from ads)
model Lead {
  id          String   @id @default(cuid())
  source      String   // "ad_campaign", "organic", "referral"
  sourceId    String?  // Campaign ID if from ads
  clientPhone String?
  clientEmail String?
  message     String?
  converted   Boolean  @default(false)
  
  // Relationships
  serviceId  String
  providerId String
  
  createdAt DateTime @default(now())
  
  @@map("leads")
} 